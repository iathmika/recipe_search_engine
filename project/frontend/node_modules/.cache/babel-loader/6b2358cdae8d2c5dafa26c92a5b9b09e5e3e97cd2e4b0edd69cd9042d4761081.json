{"ast":null,"code":"import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nfunction addHoverEvent(node, isActive) {\n  const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n  const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n  const handleEvent = (event, info) => {\n    if (event.type === \"touch\" || isDragActive()) return;\n    const props = node.getProps();\n    if (node.animationState && props.whileHover) {\n      node.animationState.setActive(\"whileHover\", isActive);\n    }\n    if (props[callbackName]) {\n      props[callbackName](event, info);\n    }\n  };\n  return addPointerEvent(node.current, eventName, handleEvent, {\n    passive: !node.getProps()[callbackName]\n  });\n}\nclass HoverGesture extends Feature {\n  mount() {\n    this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n  }\n  unmount() {}\n}\nexport { HoverGesture };","map":{"version":3,"names":["addPointerEvent","pipe","isDragActive","Feature","addHoverEvent","node","isActive","eventName","callbackName","handleEvent","event","info","type","props","getProps","animationState","whileHover","setActive","current","passive","HoverGesture","mount","unmount"],"sources":["C:/Users/Radhikesh/Documents/University_of_Edinburgh/Text_Technologies_For_Data_Science/Group_Project/final_project/recipe_search_engine/project/frontend/node_modules/framer-motion/dist/es/gestures/hover.mjs"],"sourcesContent":["import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            props[callbackName](event, info);\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,iCAAiC;AACjE,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,OAAO,QAAQ,gCAAgC;AAExD,SAASC,aAAa,CAACC,IAAI,EAAEC,QAAQ,EAAE;EACnC,MAAMC,SAAS,GAAG,SAAS,IAAID,QAAQ,GAAG,OAAO,GAAG,OAAO,CAAC;EAC5D,MAAME,YAAY,GAAG,SAAS,IAAIF,QAAQ,GAAG,OAAO,GAAG,KAAK,CAAC;EAC7D,MAAMG,WAAW,GAAG,CAACC,KAAK,EAAEC,IAAI,KAAK;IACjC,IAAID,KAAK,CAACE,IAAI,KAAK,OAAO,IAAIV,YAAY,EAAE,EACxC;IACJ,MAAMW,KAAK,GAAGR,IAAI,CAACS,QAAQ,EAAE;IAC7B,IAAIT,IAAI,CAACU,cAAc,IAAIF,KAAK,CAACG,UAAU,EAAE;MACzCX,IAAI,CAACU,cAAc,CAACE,SAAS,CAAC,YAAY,EAAEX,QAAQ,CAAC;IACzD;IACA,IAAIO,KAAK,CAACL,YAAY,CAAC,EAAE;MACrBK,KAAK,CAACL,YAAY,CAAC,CAACE,KAAK,EAAEC,IAAI,CAAC;IACpC;EACJ,CAAC;EACD,OAAOX,eAAe,CAACK,IAAI,CAACa,OAAO,EAAEX,SAAS,EAAEE,WAAW,EAAE;IACzDU,OAAO,EAAE,CAACd,IAAI,CAACS,QAAQ,EAAE,CAACN,YAAY;EAC1C,CAAC,CAAC;AACN;AACA,MAAMY,YAAY,SAASjB,OAAO,CAAC;EAC/BkB,KAAK,GAAG;IACJ,IAAI,CAACC,OAAO,GAAGrB,IAAI,CAACG,aAAa,CAAC,IAAI,CAACC,IAAI,EAAE,IAAI,CAAC,EAAED,aAAa,CAAC,IAAI,CAACC,IAAI,EAAE,KAAK,CAAC,CAAC;EACxF;EACAiB,OAAO,GAAG,CAAE;AAChB;AAEA,SAASF,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}